import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Box, Button, Typography } from '@mui/material';
import { PictureAsPdf } from '@mui/icons-material';
import CircularProgress from '@mui/material/CircularProgress';
import { createChart, getMetricInsights } from '../utils/chartUtils';
import { generatePDF } from '../utils/pdfUtils';
import StationCard from './StationCard';
import AnalysisDialog from './AnalysisDialog';

const ReportEditor = ({ groupedStations, stationData }) => {
  const [narrations, setNarrations] = useState({});
  const [generating, setGenerating] = useState(false);
  const [editingStation, setEditingStation] = useState(null);
  const [chartsLoaded, setChartsLoaded] = useState(false);
  const chartRefsLocal = useRef({});
  const containerRef = useRef(null);
  
  // Memoize station data processing
  const processedData = React.useMemo(() => {
    if (!stationData) return {};
    const processed = Object.entries(stationData).reduce((acc, [station, stationDataObj]) => {
      // Get the data array from the station data object
      const data = stationDataObj && Object.values(stationDataObj)[0];
      if (!data || !Array.isArray(data) || data.length === 0) return acc;
      
      acc[station] = {
        timestamps: data.map(d => new Date(d.Timestamp).toLocaleString()),
        forwardPower: data.map(d => d['Forward Power'] || 0),
        reflectedPower: data.map(d => d['Reflected Power'] || 0),
        temperature: data.map(d => d.Temperature || 0),
        voltage: data.map(d => d.Voltage || 0),
        current: data.map(d => d.Current || 0),
        power: data.map(d => d.Power || 0),
        // Calculate VSWR from forward and reflected power
        vswr: data.map(d => {
          const forward = d['Forward Power'] || 0;
          const reflected = d['Reflected Power'] || 0;
          if (forward <= 0) return 1;
          const sqrtRho = Math.sqrt(reflected / forward);
          return (1 + sqrtRho) / (1 - sqrtRho);
        }),
        // Calculate return loss
        returnLoss: data.map(d => {
          const forward = d['Forward Power'] || 0;
          const reflected = d['Reflected Power'] || 0;
          if (forward <= 0 || reflected <= 0) return 0;
          return -20 * Math.log10(Math.sqrt(reflected / forward));
        })
      };
      return acc;
    }, {});
    console.log('Processed data with RF metrics:', processed);
    return processed;
  }, [stationData]);


  // Initialize chart refs and load saved narrations
  useEffect(() => {
    if (!groupedStations) return;

    // Initialize chart refs
    const newChartRefs = {};
    Object.entries(groupedStations).forEach(([station]) => {
      newChartRefs[station] = {
        'Forward Power': React.createRef(),
        'Reflected Power': React.createRef(),
        'VSWR': React.createRef(),
        'Return Loss': React.createRef(),
        'Temperature': React.createRef(),
        'Voltage': React.createRef(),
        'Current': React.createRef(),
        'Power': React.createRef()
      };
    });

    chartRefsLocal.current = newChartRefs;

    // Load saved narrations
    const savedNarrations = localStorage.getItem('reportNarrations');
    if (savedNarrations) {
      const parsedNarrations = JSON.parse(savedNarrations);
      // Only load narrations for current stations
      const filteredNarrations = Object.entries(parsedNarrations)
        .filter(([station]) => groupedStations[station])
        .reduce((acc, [station, narration]) => {
          acc[station] = narration;
          return acc;
        }, {});
      setNarrations(filteredNarrations);
    }
  }, [groupedStations]);

  // Generate auto narration for a station
  const generateAutoNarration = useCallback(async (station) => {
    if (!chartRefsLocal.current) {
      console.log('Chart refs not ready for', station);
      return;
    }

    setGenerating(true);

    try {
      const data = processedData[station];
      if (!data) {
        console.error('No processed data available for station:', station);
        return;
      }

      // Calculate insights
      const forwardPowerInsights = getMetricInsights(data.timestamps, data.forwardPower);
      const reflectedPowerInsights = getMetricInsights(data.timestamps, data.reflectedPower);
      const vswrInsights = getMetricInsights(data.timestamps, data.vswr);
      const returnLossInsights = getMetricInsights(data.timestamps, data.returnLoss);
      const temperatureInsights = getMetricInsights(data.timestamps, data.temperature);
      const voltageInsights = getMetricInsights(data.timestamps, data.voltage);
      const currentInsights = getMetricInsights(data.timestamps, data.current);
      const powerInsights = getMetricInsights(data.timestamps, data.power);

      // Generate narration
      const narration = `
        ## RF System Analysis for ${station}

        ### Forward Power
        - Maximum: ${forwardPowerInsights.max.toFixed(2)}W at ${forwardPowerInsights.maxTime}
        - Minimum: ${forwardPowerInsights.min.toFixed(2)}W at ${forwardPowerInsights.minTime}
        - Average: ${forwardPowerInsights.average.toFixed(2)}W
        - Trend: ${forwardPowerInsights.trend}

        ### Reflected Power
        - Maximum: ${reflectedPowerInsights.max.toFixed(2)}W at ${reflectedPowerInsights.maxTime}
        - Minimum: ${reflectedPowerInsights.min.toFixed(2)}W at ${reflectedPowerInsights.minTime}
        - Average: ${reflectedPowerInsights.average.toFixed(2)}W
        - Trend: ${reflectedPowerInsights.trend}

        ### VSWR
        - Maximum: ${vswrInsights.max.toFixed(2)} at ${vswrInsights.maxTime}
        - Minimum: ${vswrInsights.min.toFixed(2)} at ${vswrInsights.minTime}
        - Average: ${vswrInsights.average.toFixed(2)}
        - Trend: ${vswrInsights.trend}

        ### Return Loss
        - Maximum: ${returnLossInsights.max.toFixed(2)}dB at ${returnLossInsights.maxTime}
        - Minimum: ${returnLossInsights.min.toFixed(2)}dB at ${returnLossInsights.minTime}
        - Average: ${returnLossInsights.average.toFixed(2)}dB
        - Trend: ${returnLossInsights.trend}

        ### Temperature
        - Maximum: ${temperatureInsights.max.toFixed(2)}°C at ${temperatureInsights.maxTime}
        - Minimum: ${temperatureInsights.min.toFixed(2)}°C at ${temperatureInsights.minTime}
        - Average: ${temperatureInsights.average.toFixed(2)}°C
        - Trend: ${temperatureInsights.trend}

        ### Voltage
        - Maximum: ${voltageInsights.max.toFixed(2)}V at ${voltageInsights.maxTime}
        - Minimum: ${voltageInsights.min.toFixed(2)}V at ${voltageInsights.minTime}
        - Average: ${voltageInsights.average.toFixed(2)}V
        - Trend: ${voltageInsights.trend}

        ### Current
        - Maximum: ${currentInsights.max.toFixed(2)}A at ${currentInsights.maxTime}
        - Minimum: ${currentInsights.min.toFixed(2)}A at ${currentInsights.minTime}
        - Average: ${currentInsights.average.toFixed(2)}A
        - Trend: ${currentInsights.trend}

        ### Power
        - Maximum: ${powerInsights.max.toFixed(2)}W at ${powerInsights.maxTime}
        - Minimum: ${powerInsights.min.toFixed(2)}W at ${powerInsights.minTime}
        - Average: ${powerInsights.average.toFixed(2)}W
        - Trend: ${powerInsights.trend}

        ### System Health Assessment
        ${vswrInsights.average > 1.5 ? '⚠️ High VSWR detected. Check antenna system.' : '✅ VSWR within acceptable range.'}
        ${returnLossInsights.average < -20 ? '✅ Good impedance matching.' : '⚠️ Poor return loss. Check RF system.'}
        ${temperatureInsights.max > 50 ? '⚠️ High temperature detected. Check cooling system.' : '✅ Temperature within normal range.'}
        ${voltageInsights.average < 200 ? '⚠️ Low voltage detected. Check power supply.' : '✅ Voltage within normal range.'}
        ${currentInsights.average > 10 ? '⚠️ High current detected. Check for shorts.' : '✅ Current within normal range.'}
      `;

      setNarrations(prev => ({
        ...prev,
        [station]: narration
      }));

    } catch (error) {
      console.error('Error generating narration:', error);
    } finally {
      setGenerating(false);
    }
  }, [processedData]);

  // Create and update charts
  useEffect(() => {
    if (!groupedStations || !stationData || !processedData || !chartRefsLocal.current) {
      console.log('Missing required data for chart initialization:', {
        hasGroupedStations: !!groupedStations,
        hasStationData: !!stationData,
        hasProcessedData: !!processedData,
        hasChartRefs: !!chartRefsLocal.current
      });
      return;
    }

    const charts = [];
    const pendingNarrations = [];

    // Create charts
    Object.entries(groupedStations).forEach(([station]) => {
      const refs = chartRefsLocal.current[station];
      const data = processedData[station];

      if (!data) {
        console.log(`Missing processed data for station: ${station}`);
        return;
      }

      if (refs && data) {
        // Create charts for each metric with error handling
        const createMetricChart = (metric, unit, color) => {
          try {
            const chart = createChart(
              refs[metric],
              `${metric} (${unit})`,
              data.timestamps,
              data[metric.toLowerCase().replace(' ', '')],
              color
            );
            charts.push(chart);
            return true;
          } catch (error) {
            console.error(`Error creating chart for ${metric}:`, error);
            return false;
          }
        };

        const metrics = [
          { name: 'Forward Power', unit: 'W', color: 'blue' },
          { name: 'Reflected Power', unit: 'W', color: 'red' },
          { name: 'VSWR', unit: '', color: 'orange' },
          { name: 'Return Loss', unit: 'dB', color: 'purple' },
          { name: 'Temperature', unit: '°C', color: 'green' },
          { name: 'Voltage', unit: 'V', color: 'brown' },
          { name: 'Current', unit: 'A', color: 'orange' },
          { name: 'Power', unit: 'W', color: 'purple' }
        ];

        const allChartsCreated = metrics.every(metric =>
          createMetricChart(metric.name, metric.unit, metric.color)
        );

        // Queue narration generation if charts are created and no narration exists
        if (allChartsCreated && !narrations[station]) {
          pendingNarrations.push(station);
        }
      }
    });

    // Generate narrations for all stations that need them
    if (pendingNarrations.length > 0 && !generating) {
      const generateNarrations = async () => {
        setGenerating(true);
        for (const station of pendingNarrations) {
          await generateAutoNarration(station);
        }
        setGenerating(false);
      };
      generateNarrations();
    }

    // Cleanup function to destroy charts
    return () => {
      charts.forEach(chart => {
        if (chart) chart.destroy();
      });
    };
  }, [groupedStations, stationData, processedData, generating, narrations, generateAutoNarration]);

  // Generate auto narration for a station
  const generateAutoNarration = useCallback(async (station) => {
    if (!chartRefsLocal.current) {
      console.log('Chart refs not ready for', station);
      return;
    }

    setGenerating(true);

    try {
      const data = processedData[station];
      if (!data) {
        console.error('No processed data available for station:', station);
        return;
      }

      // Calculate insights
      const forwardPowerInsights = getMetricInsights(data.timestamps, data.forwardPower);
      const reflectedPowerInsights = getMetricInsights(data.timestamps, data.reflectedPower);
      const vswrInsights = getMetricInsights(data.timestamps, data.vswr);
      const returnLossInsights = getMetricInsights(data.timestamps, data.returnLoss);
      const temperatureInsights = getMetricInsights(data.timestamps, data.temperature);
      const voltageInsights = getMetricInsights(data.timestamps, data.voltage);
      const currentInsights = getMetricInsights(data.timestamps, data.current);
      const powerInsights = getMetricInsights(data.timestamps, data.power);

      // Generate narration
      const narration = `
        ## RF System Analysis for ${station}

        ### Forward Power
        - Maximum: ${forwardPowerInsights.max.toFixed(2)}W at ${forwardPowerInsights.maxTime}
        - Minimum: ${forwardPowerInsights.min.toFixed(2)}W at ${forwardPowerInsights.minTime}
        - Average: ${forwardPowerInsights.average.toFixed(2)}W
        - Trend: ${forwardPowerInsights.trend}

        ### Reflected Power
        - Maximum: ${reflectedPowerInsights.max.toFixed(2)}W at ${reflectedPowerInsights.maxTime}
        - Minimum: ${reflectedPowerInsights.min.toFixed(2)}W at ${reflectedPowerInsights.minTime}
        - Average: ${reflectedPowerInsights.average.toFixed(2)}W
        - Trend: ${reflectedPowerInsights.trend}

        ### VSWR
        - Maximum: ${vswrInsights.max.toFixed(2)} at ${vswrInsights.maxTime}
        - Minimum: ${vswrInsights.min.toFixed(2)} at ${vswrInsights.minTime}
        - Average: ${vswrInsights.average.toFixed(2)}
        - Trend: ${vswrInsights.trend}

        ### Return Loss
        - Maximum: ${returnLossInsights.max.toFixed(2)}dB at ${returnLossInsights.maxTime}
        - Minimum: ${returnLossInsights.min.toFixed(2)}dB at ${returnLossInsights.minTime}
        - Average: ${returnLossInsights.average.toFixed(2)}dB
        - Trend: ${returnLossInsights.trend}

        ### Temperature
        - Maximum: ${temperatureInsights.max.toFixed(2)}°C at ${temperatureInsights.maxTime}
        - Minimum: ${temperatureInsights.min.toFixed(2)}°C at ${temperatureInsights.minTime}
        - Average: ${temperatureInsights.average.toFixed(2)}°C
        - Trend: ${temperatureInsights.trend}

        ### Voltage
        - Maximum: ${voltageInsights.max.toFixed(2)}V at ${voltageInsights.maxTime}
        - Minimum: ${voltageInsights.min.toFixed(2)}V at ${voltageInsights.minTime}
        - Average: ${voltageInsights.average.toFixed(2)}V
        - Trend: ${voltageInsights.trend}

        ### Current
        - Maximum: ${currentInsights.max.toFixed(2)}A at ${currentInsights.maxTime}
        - Minimum: ${currentInsights.min.toFixed(2)}A at ${currentInsights.minTime}
        - Average: ${currentInsights.average.toFixed(2)}A
        - Trend: ${currentInsights.trend}

        ### Power
        - Maximum: ${powerInsights.max.toFixed(2)}W at ${powerInsights.maxTime}
        - Minimum: ${powerInsights.min.toFixed(2)}W at ${powerInsights.minTime}
        - Average: ${powerInsights.average.toFixed(2)}W
        - Trend: ${powerInsights.trend}

        ### System Health Assessment
        ${vswrInsights.average > 1.5 ? '⚠️ High VSWR detected. Check antenna system.' : '✅ VSWR within acceptable range.'}
        ${returnLossInsights.average < -20 ? '✅ Good impedance matching.' : '⚠️ Poor return loss. Check RF system.'}
        ${temperatureInsights.max > 50 ? '⚠️ High temperature detected. Check cooling system.' : '✅ Temperature within normal range.'}
        ${voltageInsights.average < 200 ? '⚠️ Low voltage detected. Check power supply.' : '✅ Voltage within normal range.'}
        ${currentInsights.average > 10 ? '⚠️ High current detected. Check for shorts.' : '✅ Current within normal range.'}
      `;

      setNarrations(prev => ({
        ...prev,
        [station]: narration
      }));

    } catch (error) {
      console.error('Error generating narration:', error);
    } finally {
      setGenerating(false);
    }
  }, [processedData]);

  // Save narrations to localStorage when they change
  useEffect(() => {
    localStorage.setItem('reportNarrations', JSON.stringify(narrations));
  }, [narrations]);

  useEffect(() => {
    if (chartRefsLocal.current && Object.keys(chartRefsLocal.current).length > 0) {
      Object.keys(chartRefsLocal.current).forEach(baseStation => {
        generateAutoNarration(baseStation);
      });
    }
  }, [chartRefsLocal, generateAutoNarration]);

  const handleNarrationChange = (station, content) => {
    setNarrations(prev => ({
      ...prev,
      [station]: content
    }));
  };

  const generateAutoNarrations = async () => {
    setGenerating(true);
    try {
      const newNarrations = {};
      
      Object.entries(groupedStations).forEach(([, baseStations]) => {
        baseStations.forEach(baseStation => {
          const data = processedData[baseStation];
          if (!data) return;

          // Get insights for each metric
          const forwardPowerInsights = getMetricInsights(data.forwardPower, data.timestamps);
          const reflectedPowerInsights = getMetricInsights(data.reflectedPower, data.timestamps);
          const vswrInsights = getMetricInsights(data.vswr, data.timestamps);
          const returnLossInsights = getMetricInsights(data.returnLoss, data.timestamps);
          const temperatureInsights = getMetricInsights(data.temperature, data.timestamps);
          const voltageInsights = getMetricInsights(data.voltage, data.timestamps);
          const currentInsights = getMetricInsights(data.current, data.timestamps);
          const powerInsights = getMetricInsights(data.power, data.timestamps);

          // Initialize chart images
          const chartImages = {};
          
          // Capture chart images
          try {
            if (chartRefsLocal.current?.[baseStation]) {
              const refs = chartRefsLocal.current[baseStation];
              Object.assign(chartImages, {
                forwardPowerImage: refs['Forward Power'].current?.toDataURL() || '',
                reflectedPowerImage: refs['Reflected Power'].current?.toDataURL() || '',
                vswrImage: refs['VSWR'].current?.toDataURL() || '',
                returnLossImage: refs['Return Loss'].current?.toDataURL() || '',
                temperatureImage: refs['Temperature'].current?.toDataURL() || '',
                voltageImage: refs['Voltage'].current?.toDataURL() || '',
                currentImage: refs['Current'].current?.toDataURL() || '',
                powerImage: refs['Power'].current?.toDataURL() || ''
              });
            }
          } catch (err) {
            console.error('Error capturing chart images:', err);
            // Set default empty values if image capture fails
            Object.assign(chartImages, {
              forwardPowerImage: '',
              reflectedPowerImage: '',
              vswrImage: '',
              returnLossImage: '',
              temperatureImage: '',
              voltageImage: '',
              currentImage: '',
              powerImage: ''
            });
          }

          // Generate analysis text
          newNarrations[baseStation] = `
            <div class="rf-analysis">
              <h4>RF System Analysis for ${baseStation}</h4>
              
              <div class="analysis-section">
                <h4>Forward Power Analysis:</h4>
                <img src="${chartImages.forwardPowerImage}" alt="Forward Power Chart" style="width: 100%; margin-bottom: 15px;" />
                <p>Maximum: ${forwardPowerInsights.max.toFixed(2)}W at ${forwardPowerInsights.maxTime}</p>
                <p>Minimum: ${forwardPowerInsights.min.toFixed(2)}W at ${forwardPowerInsights.minTime}</p>
                <p>Average: ${forwardPowerInsights.average.toFixed(2)}W</p>
                <p>Trend: ${forwardPowerInsights.trend}</p>
              </div>

              <div class="analysis-section">
                <h4>Reflected Power Analysis:</h4>
                <img src="${chartImages.reflectedPowerImage}" alt="Reflected Power Chart" style="width: 100%; margin-bottom: 15px;" />
                <p>Maximum: ${reflectedPowerInsights.max.toFixed(2)}W at ${reflectedPowerInsights.maxTime}</p>
                <p>Minimum: ${reflectedPowerInsights.min.toFixed(2)}W at ${reflectedPowerInsights.minTime}</p>
                <p>Average: ${reflectedPowerInsights.average.toFixed(2)}W</p>
                <p>Trend: ${reflectedPowerInsights.trend}</p>
              </div>

              <div class="analysis-section">
                <h4>VSWR Analysis:</h4>
                <img src="${chartImages.vswrImage}" alt="VSWR Chart" style="width: 100%; margin-bottom: 15px;" />
                <p>Maximum: ${vswrInsights.max.toFixed(2)} at ${vswrInsights.maxTime}</p>
                <p>Minimum: ${vswrInsights.min.toFixed(2)} at ${vswrInsights.minTime}</p>
                <p>Average: ${vswrInsights.average.toFixed(2)}</p>
                <p>Trend: ${vswrInsights.trend}</p>
              </div>

              <div class="analysis-section">
                <h4>Return Loss Analysis:</h4>
                <img src="${chartImages.returnLossImage}" alt="Return Loss Chart" style="width: 100%; margin-bottom: 15px;" />
                <p>Maximum: ${returnLossInsights.max.toFixed(2)}dB at ${returnLossInsights.maxTime}</p>
                <p>Minimum: ${returnLossInsights.min.toFixed(2)}dB at ${returnLossInsights.minTime}</p>
                <p>Average: ${returnLossInsights.average.toFixed(2)}dB</p>
                <p>Trend: ${returnLossInsights.trend}</p>
              </div>

              <div class="analysis-section">
                <h4>Temperature Analysis:</h4>
                <img src="${chartImages.temperatureImage}" alt="Temperature Chart" style="width: 100%; margin-bottom: 15px;" />
                <p>Maximum: ${temperatureInsights.max.toFixed(2)}°C at ${temperatureInsights.maxTime}</p>
                <p>Minimum: ${temperatureInsights.min.toFixed(2)}°C at ${temperatureInsights.minTime}</p>
                <p>Average: ${temperatureInsights.average.toFixed(2)}°C</p>
                <p>Trend: ${temperatureInsights.trend}</p>
              </div>

              <div class="analysis-section">
                <h4>Voltage Analysis:</h4>
                <img src="${chartImages.voltageImage}" alt="Voltage Chart" style="width: 100%; margin-bottom: 15px;" />
                <p>Maximum: ${voltageInsights.max.toFixed(2)}V at ${voltageInsights.maxTime}</p>
                <p>Minimum: ${voltageInsights.min.toFixed(2)}V at ${voltageInsights.minTime}</p>
                <p>Average: ${voltageInsights.average.toFixed(2)}V</p>
                <p>Trend: ${voltageInsights.trend}</p>
              </div>

              <div class="analysis-section">
                <h4>Current Analysis:</h4>
                <img src="${chartImages.currentImage}" alt="Current Chart" style="width: 100%; margin-bottom: 15px;" />
                <p>Maximum: ${currentInsights.max.toFixed(2)}A at ${currentInsights.maxTime}</p>
                <p>Minimum: ${currentInsights.min.toFixed(2)}A at ${currentInsights.minTime}</p>
                <p>Average: ${currentInsights.average.toFixed(2)}A</p>
                <p>Trend: ${currentInsights.trend}</p>
              </div>

              <div class="analysis-section">
                <h4>Power Analysis:</h4>
                <img src="${chartImages.powerImage}" alt="Power Chart" style="width: 100%; margin-bottom: 15px;" />
                <p>Maximum: ${powerInsights.max.toFixed(2)}W at ${powerInsights.maxTime}</p>
                <p>Minimum: ${powerInsights.min.toFixed(2)}W at ${powerInsights.minTime}</p>
                <p>Average: ${powerInsights.average.toFixed(2)}W</p>
                <p>Trend: ${powerInsights.trend}</p>
              </div>

              <div class="health-assessment">
                <h4>System Health Assessment:</h4>
                <p>${vswrInsights.average > 1.5 ? '⚠️ High VSWR detected. Check antenna system.' : '✅ VSWR within acceptable range.'}</p>
                <p>${returnLossInsights.average < -20 ? '✅ Good impedance matching.' : '⚠️ Poor return loss. Check RF system.'}</p>
                <p>${temperatureInsights.max > 50 ? '⚠️ High temperature detected. Check cooling system.' : '✅ Temperature within normal range.'}</p>
              </div>
            </div>
          `;
        });
      });

      setNarrations(newNarrations);
    } catch (error) {
      console.error('Error generating narrations:', error);
    } finally {
      setGenerating(false);
    }
  };

  const handleGeneratePDF = async () => {
    setGenerating(true);
    try {
      const pdf = await generatePDF(containerRef, narrations, chartRefsLocal.current);
      pdf.save(`horizon_auto_report_${new Date().toISOString().split('T')[0]}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
    } finally {
      setGenerating(false);
    }
  };

  return (
    <Box sx={{ mt: 4 }} ref={containerRef}>
      <Box sx={{ mb: 3, display: 'flex', gap: 2 }}>
        <Button
          variant="contained"
          color="primary"
          onClick={handleGeneratePDF}
          startIcon={<PictureAsPdf />}
          disabled={!chartsLoaded}
        >
          GENERATE COMBINED PDF REPORT
        </Button>
      </Box>

      {Object.entries(groupedStations).map(([station, baseStations]) => (
        <Box key={station} sx={{ mb: 4 }}>
          <Typography variant="h5" gutterBottom>{station}</Typography>
          {baseStations.map(baseStation => (
            <StationCard
              key={baseStation}
              baseStation={baseStation}
              narration={narrations[station] || ''}
              onEditClick={() => setEditingStation(station)}
              onGenerateAnalysis={() => generateAutoNarration(station)}
              isGenerating={generating}
              chartRefs={chartRefsLocal.current[station]}
            />
          ))}
        </Box>
      ))}

      <AnalysisDialog
        open={!!editingStation}
        station={editingStation}
        content={editingStation ? narrations[editingStation] : ''}
        onClose={() => setEditingStation(null)}
        onChange={(content) => handleNarrationChange(editingStation, content)}
      />
    </Box>
  );
};

export default ReportEditor;
